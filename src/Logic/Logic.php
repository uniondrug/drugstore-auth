<?php
/**
 * Created by PhpStorm.
 * User: lvchaohui
 * Date: 2021/9/6
 * Time: 4:58 PM
 */

namespace Uniondrug\DrugstoreAuth\Logic;

use App\Errors\Error;
use App\Services\Abstracts\ServiceTrait;
use Uniondrug\DrugstoreAuth\Logic\DrugstoreAuthLogic;
use Uniondrug\DrugstoreAuth\Struct\CommonMerchantAuth;
use Uniondrug\DrugstoreAuth\Struct\DtpMerchantAuth;
use Uniondrug\DrugstoreAuth\Struct\MerchantAuth;
use Uniondrug\DrugstoreAuth\Struct\User;
use Uniondrug\Framework\Logics\Logic as FrameworkLogic;

/**
 * @package App\Logics\Abstracts\Logic
 */
abstract class Logic extends FrameworkLogic
{
    // 是否虚拟商户
    const STORE_TYPE_UN_VIRTUAL = 0; //实体
    const STORE_TYPE_VIRTUAL = 1; //虚拟
    const IDENTITY_PARTNER = 1; // 连锁
    const IDENTITY_STORE = 2; // 门店
    const IDENTITY_ASSISTANT = 3; // 店员
    // 1为普药网络2为dtp网络
    const NORMAL_STORE = 1;
    const DTP_STORE = 2;
    /**
     * 导入IDE定义
     * 1. property
     * 2. method
     */
    use ServiceTrait;

    /**
     * @var User
     */
    public $user;
    /**
     * @var MerchantAuth
     */
    public $merchantAuth;
    /**
     * @var CommonMerchantAuth
     */
    public $commonMerchantAuth;
    /**
     * @var DtpMerchantAuth
     */
    public $dtpMerchantAuth;
    /**
     * @var string
     */
    public $token;


    /**
     * @throws Error
     */
    public function beforeRun()
    {
        parent::beforeRun(); // TODO: Change the autogenerated stub
        $this->token = $this->utilService->getTokenFromRequest($this->request);
        // 获取用户登录token
        $jsonRow = (array)$this->request->getJsonRawBody();
        $assistantId = null;
        if (array_key_exists('thisLoginAssistantId', $jsonRow)) {
            $assistantId = $jsonRow['thisLoginAssistantId'];
        }
        // 店员缓存
        if ($assistantId && $this->token) {
            $this->assistantCache($assistantId);
        }
        // dtp门店
        if ($this->user && $this->user->dtpStoreOrganId && $this->token) {
            $this->dtpMerchantCache($this->user->dtpStoreOrganId, $assistantId);
        }
        // 普通门店
        if ($this->user && $this->user->commonStoreOrganId && $this->token) {
            $this->commonMerchantCache($this->user->commonStoreOrganId, $assistantId);
        }
        // 当前门店
        if ($this->user && $this->user->storeOrganId && $this->token) {
            $this->merchantCache($this->user->storeOrganId, $assistantId);
        }
    }

    /**
     * 店员缓存
     * @param $assistantId
     */
    private function assistantCache($assistantId)
    {
        $userJson = $this->redis->get(DrugstoreAuthLogic::USER_CACHE . $assistantId);
        if ($userJson) {
            $this->user = User::factory(json_decode($userJson, true));
        } else {
            DrugstoreAuthLogic::factory([
                'assistantId' => $assistantId
            ]);
            $userJson = $this->redis->get(DrugstoreAuthLogic::USER_CACHE . $assistantId);
            $this->user = User::factory(json_decode($userJson, true));
        }
    }

    /**
     * dtp门店
     * @param $storeOrganId
     * @param $assistantId
     */
    private function dtpMerchantCache($storeOrganId, $assistantId)
    {
        $dtpMerchantAuth = $this->redis->get(DrugstoreAuthLogic::DTP_STORE_CACHE . $storeOrganId);
        if ($dtpMerchantAuth) {
            $this->dtpMerchantAuth = DtpMerchantAuth::factory(json_decode($dtpMerchantAuth, true));
        } else {
            DrugstoreAuthLogic::factory([
                'assistantId' => $assistantId
            ]);
            $dtpMerchantAuth = $this->redis->get(DrugstoreAuthLogic::DTP_STORE_CACHE . $storeOrganId);
            $this->dtpMerchantAuth = DtpMerchantAuth::factory(json_decode($dtpMerchantAuth, true));
        }
    }

    /**
     * 普通门店
     * @param $storeOrganId
     * @param $assistantId
     */
    private function commonMerchantCache($storeOrganId, $assistantId)
    {
        $commonMerchantJson = $this->redis->get(DrugstoreAuthLogic::COMMON_STORE_CACHE . $storeOrganId);
        if ($commonMerchantJson) {
            $this->commonMerchantAuth = CommonMerchantAuth::factory(json_decode($commonMerchantJson, true));
        } else {
            DrugstoreAuthLogic::factory([
                'assistantId' => $assistantId
            ]);
            $commonMerchantJson = $this->redis->get(DrugstoreAuthLogic::COMMON_STORE_CACHE . $storeOrganId);
            $this->commonMerchantAuth = CommonMerchantAuth::factory(json_decode($commonMerchantJson, true));
        }
    }

    /**
     * 当前门店
     * @param $storeOrganId
     * @param $assistantId
     */
    private function merchantCache($storeOrganId, $assistantId)
    {
        $merchantJson = $this->redis->get(DrugstoreAuthLogic::NOW_STORE_CACHE . $storeOrganId);
        if ($merchantJson) {
            $this->merchantAuth = MerchantAuth::factory(json_decode($merchantJson, true));
        } else {
            DrugstoreAuthLogic::factory([
                'assistantId' => $assistantId
            ]);
            $merchantJson = $this->redis->get(DrugstoreAuthLogic::NOW_STORE_CACHE . $storeOrganId);
            $this->merchantAuth = MerchantAuth::factory(json_decode($merchantJson, true));
        }
    }
}